{"version":3,"sources":["Types/types.ts","store/TodoReducer.ts","store/index.ts","api/api.ts","store/actions.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Action","defaultTodo","todos","loading","error","query","sortedTodos","completeStatus","userId","user","isLoadingError","rootReducer","combineReducers","todo","state","action","type","ADD_TODOS_FROM_SERVER","SUCCES_ADD_TODO","payload","ERROR_ADD_TODO","FILTER_BY_NAME","SET_COMPLETE_STATUS","SORT_TODO","filter","title","toLowerCase","includes","completed","SET_RANDOM","map","value","sort","Math","random","a","b","DELETE_TODO","id","SET_USER_ID","ADD_USER","IS_LOADING_ERROR","store","createStore","composeWithDevTools","applyMiddleware","thunk","useTypesSelector","useSelector","getUser","API_USER_URL","fetch","response","json","fetchTodos","dispatch","axios","get","data","setSorteredTodos","getUsersFromServer","setLoadingError","TodoList","selectUser","useDispatch","useEffect","className","onChange","event","target","onClick","classNames","checked","CurrentUser","userFromServer","useCallback","getUsers","name","email","phone","App","selectedUserId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15614015.chunk.js","sourcesContent":["export interface StateTodo {\n  todos: Todo[],\n  loading: boolean,\n  error:null | string,\n  query: string,\n  sortedTodos: Todo[],\n  completeStatus: string,\n  userId: number,\n  user: User | null,\n  isLoadingError: boolean,\n}\n\ninterface SuccesAddTodoFromServer {\n  type: Action.SUCCES_ADD_TODO;\n  payload: Todo[]\n}\n\ninterface AddTodosFromServer {\n  type: Action.ADD_TODOS_FROM_SERVER;\n}\n\ninterface ErrorAddTodoFromServer {\n  type: Action.ERROR_ADD_TODO;\n  payload: string;\n}\n\ninterface FilterByName {\n  type: Action.FILTER_BY_NAME;\n  payload: string;\n}\n\ninterface SortTodo {\n  type: Action.SORT_TODO;\n  payload: Todo[]\n}\n\ninterface CompleteStatus {\n  type: Action.SET_COMPLETE_STATUS,\n  payload: string,\n}\n\ninterface SetRandom {\n  type: Action.SET_RANDOM,\n  payload: Todo[],\n}\n\ninterface DeleteTodo {\n  type: Action.DELETE_TODO,\n  payload: number,\n}\n\ninterface SetUserId {\n  type: Action.SET_USER_ID,\n  payload: number,\n}\n\ninterface AddUser {\n  type: Action.ADD_USER,\n  payload: User,\n}\n\ninterface IsLoadingError {\n  type: Action.IS_LOADING_ERROR,\n  payload: boolean,\n}\n\nexport type TodoAction = AddTodosFromServer\n| SuccesAddTodoFromServer\n| ErrorAddTodoFromServer\n| FilterByName\n| SortTodo\n| CompleteStatus\n| SetRandom\n| DeleteTodo\n| SetUserId\n| AddUser\n| IsLoadingError;\n\nexport enum Action {\n  ADD_TODOS_FROM_SERVER = 'ADD_TODOS_FROM_SERVER',\n  SUCCES_ADD_TODO = 'SUCCES_ADD_TODO',\n  ERROR_ADD_TODO = 'ERROR_ADD_TODO',\n  FILTER_BY_NAME = 'FILTER_BY_NAME',\n  SORT_TODO = 'SORT_TODO',\n  SET_COMPLETE_STATUS = 'SET_COMPLETE_STATUS',\n  SET_RANDOM = 'SET_RANDOM',\n  DELETE_TODO = 'DELETE_TODO',\n  SET_USER_ID = 'SET_USER_ID',\n  ADD_USER = 'ADD_USER',\n  IS_LOADING_ERROR = 'IS_LOADING_ERROR',\n}\n","import { Action, StateTodo, TodoAction } from '../Types/types';\n\nconst defaultTodo:StateTodo = {\n  todos: [],\n  loading: false,\n  error: null,\n  query: '',\n  sortedTodos: [],\n  completeStatus: 'All',\n  userId: 0,\n  user: null,\n  isLoadingError: false,\n};\n\nexport const TodoReducer = (\n  state:StateTodo = defaultTodo,\n  action:TodoAction,\n):StateTodo => {\n  switch (action.type) {\n    case Action.ADD_TODOS_FROM_SERVER:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case Action.SUCCES_ADD_TODO:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        todos: action.payload,\n      };\n\n    case Action.ERROR_ADD_TODO:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    case Action.FILTER_BY_NAME:\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case Action.SET_COMPLETE_STATUS:\n      return {\n        ...state,\n        completeStatus: action.payload,\n      };\n    case Action.SORT_TODO:\n      return {\n        ...state,\n        sortedTodos: action.payload.filter(todo => {\n          switch (state.completeStatus) {\n            case 'All':\n              return todo && todo.title.toLowerCase().includes(state.query);\n            case 'Complete':\n              return todo.completed\n              && todo.title.toLowerCase().includes(state.query);\n            case 'notComplete':\n              return !todo.completed\n              && todo.title.toLowerCase().includes(state.query);\n            default:\n              return 0;\n          }\n        }),\n      };\n    case Action.SET_RANDOM:\n      return {\n        ...state,\n        sortedTodos:\n        action.payload.map(value => ({ value, sort: Math.random() }))\n          .sort((a, b) => a.sort - b.sort)\n          .map(({ value }) => value),\n      };\n    case Action.DELETE_TODO:\n      return {\n        ...state,\n        todos: state.sortedTodos.filter(\n          todo => action.payload !== todo.id,\n        ),\n      };\n    case Action.SET_USER_ID:\n      return {\n        ...state,\n        userId: action.payload,\n      };\n    case Action.ADD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case Action.IS_LOADING_ERROR:\n      return {\n        ...state,\n        isLoadingError: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport {\n  applyMiddleware,\n  combineReducers,\n  legacy_createStore as createStore,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { TodoReducer } from './TodoReducer';\n\nconst rootReducer = combineReducers({\n  todo: TodoReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport const useTypesSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios from 'axios';\nimport { Dispatch } from 'react';\nimport { Action, TodoAction } from '../Types/types';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api/todos`;\n\nexport async function getUser(API_USER_URL:string) {\n  const response = await fetch(API_USER_URL);\n\n  const user = await response.json();\n\n  return user;\n}\n\nexport const fetchTodos = () => {\n  return async (dispatch:Dispatch<TodoAction>) => {\n    try {\n      dispatch({ type: Action.ADD_TODOS_FROM_SERVER });\n      const response = await axios.get(API_URL);\n\n      dispatch({ type: Action.SUCCES_ADD_TODO, payload: response.data });\n    } catch (e) {\n      dispatch({\n        type: Action.ERROR_ADD_TODO,\n        payload: 'Can`t get data from server',\n      });\n    }\n  };\n};\n","import { Action } from '../Types/types';\n\nexport const getTodosFromServer = (payload:Todo[]) => ({\n  type: Action.ADD_TODOS_FROM_SERVER,\n  payload,\n});\n\nexport const setQuery = (payload:string) => ({\n  type: Action.FILTER_BY_NAME,\n  payload,\n});\n\nexport const setSorteredTodos = (payload:Todo[]) => ({\n  type: Action.SORT_TODO,\n  payload,\n});\n\nexport const setCompleteStatus = (payload:string) => ({\n  type: Action.SET_COMPLETE_STATUS,\n  payload,\n});\n\nexport const setRandom = (payload: Todo[]) => ({\n  type: Action.SET_RANDOM,\n  payload,\n});\n\nexport const deleteTodo = (payload: number) => ({\n  type: Action.DELETE_TODO,\n  payload,\n});\n\nexport const setUserId = (payload: number) => ({\n  type: Action.SET_USER_ID,\n  payload,\n});\n\nexport const getUsersFromServer = (payload: User | null) => ({\n  type: Action.ADD_USER,\n  payload,\n});\n\nexport const setLoadingError = (payload: boolean) => ({\n  type: Action.IS_LOADING_ERROR,\n  payload,\n});\n","import React, {\n  ChangeEvent,\n  useEffect,\n} from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useTypesSelector } from '../../store';\nimport { fetchTodos } from '../../api/api';\nimport {\n  deleteTodo,\n  setCompleteStatus,\n  setQuery, setRandom, setSorteredTodos,\n} from '../../store/actions';\n\ntype Props = {\n  selectUser: (x:number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  selectUser,\n}) => {\n  const {\n    error,\n    loading,\n    todos,\n    query,\n    completeStatus,\n    sortedTodos,\n    userId,\n  } = useTypesSelector(state => state.todo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchTodos());\n    dispatch(setSorteredTodos(todos));\n  }, []);\n\n  useEffect(() => {\n    dispatch(setSorteredTodos(todos));\n  }, [todos, completeStatus, query]);\n\n  const filterByComplete = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(setCompleteStatus(event.target.value));\n  };\n\n  const search = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(setQuery(event.target.value));\n  };\n\n  const randomize = () => {\n    dispatch(setRandom(sortedTodos));\n  };\n\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n\n  if (error) {\n    return <h1>{error}</h1>;\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label>\n        Filter by name:\n        <input type=\"text\" onChange={search} value={query} />\n        <select\n          value={completeStatus}\n          onChange={filterByComplete}\n        >\n          <option value=\"All\">\n            All\n          </option>\n          <option value=\"Complete\">\n            Complete\n          </option>\n          <option value=\"notComplete\">\n            notComplete\n          </option>\n        </select>\n      </label>\n\n      <button type=\"button\" onClick={randomize}>\n        Random\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {sortedTodos.map((todo) => (\n            <li className={\n              classNames(\n                'TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )\n            }\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} />\n                <p>{todo.title}</p>\n              </label>\n              <div>\n                <button\n                  className={\n                    classNames(\n                      'TodoList__user-button', 'button', {\n                        'TodoList__user-button--selected':\n                        todo.userId === userId,\n                      },\n                    )\n                  }\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId ? todo.userId : 'undefined'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={\n                    () => (dispatch(deleteTodo(todo.id)))\n                  }\n                >\n                  X\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api/api';\nimport { useTypesSelector } from '../../store';\nimport { getUsersFromServer, setLoadingError } from '../../store/actions';\n\n type Props = {\n   selectUser: (x:number) => void\n };\n\nexport const CurrentUser: React.FC<Props> = ({ selectUser }) => {\n  const dispatch = useDispatch();\n  const {\n    user,\n    userId,\n    isLoadingError,\n  } = useTypesSelector(state => state.todo);\n\n  const userFromServer = useCallback(async () => {\n    const API_USER_URL = `https://mate.academy/students-api/users/${userId}`;\n\n    try {\n      const getUsers = await getUser(API_USER_URL);\n\n      dispatch(setLoadingError(false));\n      dispatch(getUsersFromServer(getUsers));\n    } catch {\n      dispatch(getUsersFromServer(null));\n      dispatch(setLoadingError(true));\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    userFromServer();\n  }, [userId]);\n\n  return (\n    <>\n      {user && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {userId}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              selectUser(0);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      {isLoadingError && (\n        <div className=\"CurrentUser\">\n          <h3 className=\"CurrentUser__name\">\n            No user info\n          </h3>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { fetchTodos } from './api/api';\nimport { setUserId } from './store/actions';\nimport { useTypesSelector } from './store';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUserId = useTypesSelector(state => state.todo.userId);\n\n  useEffect(() => {\n    dispatch(fetchTodos());\n  }, []);\n\n  const selectUser = (userId:number) => {\n    dispatch(setUserId(userId));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectUser={selectUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectUser={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}